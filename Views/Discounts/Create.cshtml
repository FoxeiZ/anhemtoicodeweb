@model anhemtoicodeweb.Models.Discount

@{
    ViewBag.Title = "Create";
}

<h2>Create</h2>


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>Discount</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.NameDiscount, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.NameDiscount, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.NameDiscount, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.TypeDiscount, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("TypeDiscount", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.TypeDiscount, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.CodeDiscount, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.CodeDiscount, new { htmlAttributes = new { @class = "form-control", maxlength = 20 } })
                @Html.ValidationMessageFor(model => model.CodeDiscount, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ValueDiscount, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div class=" d-flex flex-row">
                    @Html.EditorFor(model => model.ValueDiscount, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.ValueDiscount, "", new { @class = "text-danger" })
                    <div>
                        @Html.DropDownList("Unit", null, htmlAttributes: new { @class = "form-control", style = "width: unset;" })
                        @Html.ValidationMessageFor(model => model.Unit, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.StartDate, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div class="d-flex flex-row gap-2">
                    @Html.HiddenFor(model => model.StartDate)
                    <input class="form-control" id="startdate-date" onchange="updateEndDate('date')" type="date" />
                    <input class="form-control" id="startdate-time" type="time" onchange="updateEndDate('time')">
                </div>
                @Html.ValidationMessageFor(model => model.StartDate, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.EndDate, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div class="d-flex flex-row gap-2">
                    @Html.HiddenFor(model => model.EndDate)
                    <input class="form-control" id="enddate-date" onchange="updateEndDate('date')" type="date" />
                    <input class="form-control" id="enddate-time" type="time" onchange="updateEndDate('time')">
                </div>
                @Html.ValidationMessageFor(model => model.EndDate, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10 mt-2">
                <input style="margin-right:4px" type="submit" value="Tạo mã" class="btn btn-success" />
                @Html.ActionLink("Về trang", "Index", "", new { @class = "btn btn-warning" })
            </div>
        </div>
    </div>
}


@section JavaScript {
    @Scripts.Render("~/bundles/jqueryval")
    <script>
        function capitalize(s) {
            return String(s[0]).toUpperCase() + String(s).slice(1);
        }

        function updateDate(where, who) {
            const date = document.getElementById(`${capitalize(where)}Date`);
            const date_date = document.getElementById(`${where}date-date`);
            const date_time = document.getElementById(`${where}date-time`);

            if (who == "") {
                var d = new Date(date.value)
                var iso_string = d.toISOString().split('T')
                date_date.value = iso_string[0]
                date_time.value = iso_string[1].split(".")[0]

            } else if (who == "date") {
                date.value = `${(new Date(date_date.value)).toLocaleDateString()} ${date.value.split(' ')[1]}`

            } else if (who == "time") {
                var comb = `${date_date.value} ${date_time.value}`
                date.value = `${date.value.split(' ')[0]} ${(new Date(comb)).toLocaleTimeString()}`
            }
        }

        function updateStartDate(who) {
            updateDate("start", who)
        }

        function updateEndDate(who) {
            updateDate("end", who)
        }

        updateStartDate("")
        updateEndDate("")
    </script>
}
