@{
    int cart_num = 0;
    if (Session["Cart"] != null)
    {
        anhemtoicodeweb.Models.Cart cart = Session["Cart"] as anhemtoicodeweb.Models.Cart;
        cart_num = cart.TotalQuantity();
    }
}

<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewBag.Title - My ASP.NET Application</title>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Montserrat" rel="stylesheet">
    @Styles.Render("~/Content/css")
    @Styles.Render("~/Content/Site.css")
    @Scripts.Render("~/bundles/modernizr")
    @RenderSection("Styles", false)
    <style>
        .error-info {
            border-radius: 10px;
            font-size: large;
            text-align: center;
            background: #ff000070;
            border: #ff0000b5 2px solid;
            width: max-content;
            height: max-content;
            line-height: normal;
            padding: 5px;
        }
    </style>
    <script type="text/javascript">
        "use strict"; function _classPrivateMethodInitSpec(t, e) { _checkPrivateRedeclaration(t, e), e.add(t) } function _defineProperty(t, e, s) { return e in t ? Object.defineProperty(t, e, { value: s, enumerable: !0, configurable: !0, writable: !0 }) : t[e] = s, t } function _classPrivateMethodGet(t, e, s) { if (!e.has(t)) throw new TypeError("attempted to get private field on non-instance"); return s } function _classPrivateFieldInitSpec(t, e, s) { _checkPrivateRedeclaration(t, e), e.set(t, s) } function _checkPrivateRedeclaration(t, e) { if (e.has(t)) throw new TypeError("Cannot initialize the same private elements twice on an object") } function _classPrivateFieldSet(t, e, s) { return _classApplyDescriptorSet(t, _classExtractFieldDescriptor(t, e, "set"), s), s } function _classApplyDescriptorSet(t, e, s) { if (e.set) e.set.call(t, s); else { if (!e.writable) throw new TypeError("attempted to set read only private field"); e.value = s } } function _classPrivateFieldGet(t, e) { return _classApplyDescriptorGet(t, _classExtractFieldDescriptor(t, e, "get")) } function _classExtractFieldDescriptor(t, e, s) { if (!e.has(t)) throw new TypeError("attempted to " + s + " private field on non-instance"); return e.get(t) } function _classApplyDescriptorGet(t, e) { return e.get ? e.get.call(t) : e.value } var _count = new WeakMap; class Modal { constructor() { _classPrivateFieldInitSpec(this, _count, { writable: !0, value: 0 }) } show({ type: t, title: e = "", content: s = "", buttons: a = [], centered: o = !1, dismissible: i = !0, backdrop: n = !!i || "static", keyboard: r = i, focus: l = !0, fullscreen: d = !1, size: c = "" }) { _classPrivateFieldSet(this, _count, 1 + +_classPrivateFieldGet(this, _count)), c = ["sm", "lg", "xl"].includes(c) ? `modal-${c}` : "", d = d ? "modal-fullscreen" : "", o = o ? "modal-dialog-centered modal-dialog-scrollable" : ""; const b = Bs5Utils.defaults.styles[t], u = b.btnClose.join(" "), m = b.border, h = document.createElement("div"); h.setAttribute("id", `modal-${_classPrivateFieldGet(this, _count)}`), h.setAttribute("tabindex", "-1"), h.classList.add("modal"); let p = "", v = []; Array.isArray(a) && a.length && (p += `<div class="modal-footer ${m.join(" ")}">`, a.forEach((t, e) => { switch (t.type || "button") { case "dismiss": p += `<button type="button" class="${t.class}" data-bs-dismiss="modal">${t.text}</button>`; break; default: let s = `modal-${_classPrivateFieldGet(this, _count)}-button-${e}`; p += `<button type="button" id="${s}" class="${t.class}">${t.text}</button>`, t.hasOwnProperty("handler") && "function" == typeof t.handler && v.push({ id: s, handler: t.handler }) } }), p += "</div>"), h.innerHTML = ` <div class="modal-dialog ${o} ${d} ${c}">\n                                <div class="modal-content border-0">\n                                  ${e.length ? `<div class="modal-header border-0 ${b.main.join(" ")}">\n                                    <h5 class="modal-title">${e}</h5>\n                                    ${i ? `<button type="button" class="btn-close ${u}" data-bs-dismiss="modal" aria-label="Close"></button>` : ""}\n                                  </div>` : ""}\n                                  ${s.length ? `<div class="modal-body">${s}</div>` : ""}\n                                  ${p}\n                                </div>\n                              </div>`, document.body.appendChild(h), h.addEventListener("hidden.bs.modal", function (t) { t.target.remove() }), v.forEach(t => { document.getElementById(t.id).addEventListener("click", t.handler) }); const f = { backdrop: n, keyboard: r, focus: l }, y = new bootstrap.Modal(h, f); return y.show(), y } } var _count2 = new WeakMap; class Snack { constructor() { _classPrivateFieldInitSpec(this, _count2, { writable: !0, value: 0 }) } show(t, e, s = 0, a = !0) { _classPrivateFieldSet(this, _count2, 1 + +_classPrivateFieldGet(this, _count2)); const o = Bs5Utils.defaults.styles[t], i = o.btnClose.join(" "), n = document.createElement("div"); n.classList.add("toast", "align-items-center", "border-1", "border-dark"), o.main.forEach(t => { n.classList.add(t) }), n.setAttribute("id", `snack-${_classPrivateFieldGet(this, _count2)}`), n.setAttribute("role", "alert"), n.setAttribute("aria-live", "assertive"), n.setAttribute("aria-atomic", "true"), n.innerHTML = `<div class="d-flex">\n                        <div class="toast-body">${e}</div>\n                        ${a ? `<button type="button" class="btn-close ${i} me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>` : ""}\n                      </div>`, Bs5Utils.defaults.toasts.stacking || document.querySelectorAll(`#${Bs5Utils.defaults.toasts.container} .toast`).forEach(t => { t.remove() }), document.querySelector(`#${Bs5Utils.defaults.toasts.container}`).appendChild(n), n.addEventListener("hidden.bs.toast", function (t) { t.target.remove() }); const r = { autohide: s > 0 && "number" == typeof s }; s > 0 && "number" == typeof s && (r.delay = s); const l = new bootstrap.Toast(n, r); return l.show(), l } } var _count3 = new WeakMap; class Toast { constructor() { _classPrivateFieldInitSpec(this, _count3, { writable: !0, value: 0 }) } show({ type: t, icon: e = "", title: s, subtitle: a = "", content: o = "", buttons: i = [], delay: n = 0, dismissible: r = !0 }) { _classPrivateFieldSet(this, _count3, 1 + +_classPrivateFieldGet(this, _count3)); const l = Bs5Utils.defaults.styles[t], d = l.btnClose.join(" "), c = l.border, b = document.createElement("div"); b.setAttribute("id", `toast-${_classPrivateFieldGet(this, _count3)}`), b.setAttribute("role", "alert"), b.setAttribute("aria-live", "assertive"), b.setAttribute("aria-atomic", "true"), b.classList.add("toast", "align-items-center"), c.forEach(t => { b.classList.add(t) }); let u = "", m = []; Array.isArray(i) && i.length && (u += `<div class="d-flex justify-content-center mt-2 pt-2 border-top ${c.join(" ")}">`, i.forEach((t, e) => { switch (t.type || "button") { case "dismiss": u += `<button type="button" class="${t.class}" data-bs-dismiss="toast">${t.text}</button>&nbsp;`; break; default: let s = `toast-${_classPrivateFieldGet(this, _count3)}-button-${e}`; u += `<button type="button" id="${s}" class="${t.class}">${t.text}</button>&nbsp;`, t.hasOwnProperty("handler") && "function" == typeof t.handler && m.push({ id: s, handler: t.handler }) } }), u += "</div>"), b.innerHTML = `<div class="toast-header ${l.main.join(" ")}">\n                            ${e}\n                            <strong class="me-auto">${s}</strong>\n                            <small>${a}</small>\n                            ${r ? `<button type="button" class="btn-close ${d}" data-bs-dismiss="toast" aria-label="Close"></button>` : ""}\n                        </div>\n                        <div class="toast-body">\n                            ${o}\n                            ${u}\n                        </div>`, Bs5Utils.defaults.toasts.stacking || document.querySelectorAll(`#${Bs5Utils.defaults.toasts.container} .toast`).forEach(t => { t.remove() }), document.querySelector(`#${Bs5Utils.defaults.toasts.container}`).appendChild(b), b.addEventListener("hidden.bs.toast", function (t) { t.target.remove() }), m.forEach(t => { document.getElementById(t.id).addEventListener("click", t.handler) }); const h = { autohide: n > 0 && "number" == typeof n }; n > 0 && "number" == typeof n && (h.delay = n); const p = new bootstrap.Toast(b, h); return p.show(), p } } var _createToastContainer = new WeakSet; class Bs5Utils { constructor() { _classPrivateMethodInitSpec(this, _createToastContainer), _classPrivateMethodGet(this, _createToastContainer, _createToastContainer2).call(this), this.Toast = new Toast, this.Snack = new Snack, this.Modal = new Modal } static registerStyle(t, e) { if ("object" != typeof e && Array.isArray(e)) throw "The styles parameter must be an object when you register component style."; Bs5Utils.defaults.styles[t] = e } } function _createToastContainer2() { let t = document.querySelector(`#${Bs5Utils.defaults.toasts.container}`); if (!t) { const e = { "top-left": "top-0 start-0 ms-1 mt-1", "top-center": "top-0 start-50 translate-middle-x mt-1", "top-right": "top-0 end-0 me-1 mt-1", "middle-left": "top-50 start-0 translate-middle-y ms-1", "middle-center": "top-50 start-50 translate-middle p-3", "middle-right": "top-50 end-0 translate-middle-y me-1", "bottom-left": "bottom-0 start-0 ms-1 mb-1", "bottom-center": "bottom-0 start-50 translate-middle-x mb-1", "bottom-right": "bottom-0 end-0 me-1 mb-1" }; (t = document.createElement("div")).classList.add("position-relative"), t.setAttribute("aria-live", "polite"), t.setAttribute("aria-atomic", "true"), t.innerHTML = `<div id="${Bs5Utils.defaults.toasts.container}" class="toast-container position-fixed pb-1 ${e[Bs5Utils.defaults.toasts.position] || e["top-right"]}"></div>`, document.body.appendChild(t) } } _defineProperty(Bs5Utils, "defaults", { toasts: { position: "top-right", container: "toast-container", stacking: !0 }, styles: { secondary: { btnClose: ["btn-close-white"], main: ["text-white", "bg-secondary"], border: ["border-secondary"] }, light: { btnClose: [], main: ["text-dark", "bg-light", "border-bottom", "border-dark"], border: ["border-dark"] }, white: { btnClose: [], main: ["text-dark", "bg-white", "border-bottom", "border-dark"], border: ["border-dark"] }, dark: { btnClose: ["btn-close-white"], main: ["text-white", "bg-dark"], border: ["border-dark"] }, info: { btnClose: ["btn-close-white"], main: ["text-white", "bg-info"], border: ["border-info"] }, primary: { btnClose: ["btn-close-white"], main: ["text-white", "bg-primary"], border: ["border-primary"] }, success: { btnClose: ["btn-close-white"], main: ["text-white", "bg-success"], border: ["border-success"] }, warning: { btnClose: ["btn-close-white"], main: ["text-white", "bg-warning"], border: ["border-warning"] }, danger: { btnClose: ["btn-close-white"], main: ["text-white", "bg-danger"], border: ["border-danger"] } } });
    </script>
</head>
<body class="m-0">
    <nav class="navbar navbar-expand-sm navbar-toggleable-sm navbar-header">
        <div class="container">
            <a class="logo" href="@Url.Action("Index", "Home")">
                testing
            </a>
            <div class="nav-button">
                <a id="nav-home" href="@Url.Action("Index", "Home")">
                    Home
                </a>
                <a id="nav-shop" href="@Url.Action("Index", "Home")">
                    Shop
                </a>
                <a id="nav-products" href="@Url.Action("Index", "Products")">
                    Products
                </a>
                <a id="nav-sale" href="@Url.Action("Index", "Home")">
                    Sale
                </a>
            </div>
            <div class="d-flex flex-row gap-2">
                <a href="@Url.Action("Search", "Home")">
                    <div class="box-link">
                        <svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" width="24" height="24" viewBox="0 0 50 50">
                            <path d="M 21 3 C 11.621094 3 4 10.621094 4 20 C 4 29.378906 11.621094 37 21 37 C 24.710938 37 28.140625 35.804688 30.9375 33.78125 L 44.09375 46.90625 L 46.90625 44.09375 L 33.90625 31.0625 C 36.460938 28.085938 38 24.222656 38 20 C 38 10.621094 30.378906 3 21 3 Z M 21 5 C 29.296875 5 36 11.703125 36 20 C 36 28.296875 29.296875 35 21 35 C 12.703125 35 6 28.296875 6 20 C 6 11.703125 12.703125 5 21 5 Z"></path>
                        </svg>
                    </div>
                </a>
                <a href="@Url.Action("Index", "ShoppingCart")">
                    <div class="box-link position-relative">
                        @if (cart_num != 0)
                        {
                            <div id="cart_number">@cart_num</div>
                        }
                        else
                        {
                            <div style="display: none;" id="cart_number"></div>
                        }
                        <img src="~/Image/svg/cart.svg" alt="cart list" />
                    </div>
                </a>
                <div class="position-relative">
                    @if (Session["UserID"] != null)
                    {
                        <a class="profile-link" href="@Url.Action("Index", "Profile")">
                            @*<img src="@Url.Content("/Image/profile.png")" alt="profile image" class="profile-img" />*@
                            <div class="box-link">
                                <img src="~/Image/svg/person.svg" alt="profile image" />
                            </div>
                        </a>
                    }
                    else
                    {
                        <a class="profile-link" href="@Url.Action("Index", "Login")">
                            <div class="box-link">
                                <img src="~/Image/svg/person.svg" alt="profile image" />
                            </div>
                        </a>
                    }
                    <div class="d-flex flex-column gap-2 p-2 profile-popup">
                        @if (Session["UserID"] != null)
                        {
                            <div>Hello, <b>@Session["NameCus"]</b>!</div>
                            <hr style="margin: 0.3em 0;" />
                            <a href="@Url.Action("Index", "Profile")">Thông tin khách hàng</a>
                            <a href="@Url.Action("LogoutUser", "Login")">Đăng xuất</a>
                        }
                        else
                        {
                            <div>Hello, Anonymous user</div>
                            <hr style="margin: 0.3em 0;" />
                            <a href="@Url.Action("Index", "Login")">Đăng nhập</a>
                            <a href="@Url.Action("RegisterUser", "Login")">Đăng ký</a>
                        }
                        <hr style="margin: 0.3em 0;" />
                        <a href="@Url.Action("CheckOrder", "ShoppingCart")">Kiểm tra đơn hàng</a>
                    </div>
                </div>
            </div>
        </div>
    </nav>

    <div class="container index-container mt-4" style="min-height: calc(100vh - 450px);">
        @if (TempData["Error"] != null)
        {
            <div class="error-info">@TempData["Error"]</div>
        }
        @if (ViewBag.Error != null)
        {
            <div class="error-info">@ViewBag.Error</div>
        }
        @RenderBody()
    </div>

    <footer>
        <div class="container">
            <div class="wrapper">
                <a class="logo" href="@Url.Action("Index", "Home")">
                    testing
                </a>
            </div>
            <hr />
            <div class="wrapper">
                <div>© 2024 <b>testing</b>. All rights reserved</div>
            </div>
        </div>

    </footer>

    @Scripts.Render("~/bundles/jquery")
    @Scripts.Render("~/bundles/bootstrap")
    @Scripts.Render("~/Scripts/_Layout.js")
    @RenderSection("JavaScript", false)

</body>
</html>
